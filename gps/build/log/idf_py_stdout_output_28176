[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Users\Kaique\Documents\PROJETOS\GPS_IDF\gps\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.1.2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Users/Kaique/Documents/PROJETOS/GPS_IDF/gps/build/bootloader/bootloader.bin"
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/8] Building C object esp-idf/GPS/CMakeFiles/__idf_GPS.dir/GPS.c.obj
[3/8] Linking C static library esp-idf\GPS\libGPS.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable gps.elf
[6/8] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/Users/Kaique/Documents/PROJETOS/GPS_IDF/gps/build/gps.bin
[7/8] cmd.exe /C "cd /D C:\Users\Kaique\Documents\PROJETOS\GPS_IDF\gps\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.1.2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Users/Kaique/Documents/PROJETOS/GPS_IDF/gps/build/partition_table/partition-table.bin C:/Users/Kaique/Documents/PROJETOS/GPS_IDF/gps/build/gps.bin"
gps.bin binary size 0x304d0 bytes. Smallest app partition is 0x100000 bytes. 0xcfb30 bytes (81%) free.
[7/8] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.1.2\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.1.2 -D SERIAL_TOOL=C:/Espressif/python_env/idf5.1_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.1.2/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/Users/Kaique/Documents/PROJETOS/GPS_IDF/gps/build -P C:/Espressif/frameworks/esp-idf-v5.1.2/components/esptool_py/run_serial_tool.cmake"
esptool.py --chip esp32 -p COM4 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 gps.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM4
Connecting.....
Chip is ESP32-D0WDQ6 (revision v1.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
WARNING: Detected crystal freq 41.01MHz is quite different to normalized freq 40MHz. Unsupported crystal in use?
Crystal is 40MHz
MAC: ec:94:cb:6c:ef:38
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x00040fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26640 bytes to 16691...
Writing at 0x00001000... (50 %)
Writing at 0x0000768e... (100 %)
Wrote 26640 bytes (16691 compressed) at 0x00001000 in 0.9 seconds (effective 248.8 kbit/s)...
Hash of data verified.
Compressed 197840 bytes to 109582...
Writing at 0x00010000... (14 %)
Writing at 0x0001d094... (28 %)
Writing at 0x000228f1... (42 %)
Writing at 0x0002871d... (57 %)
Writing at 0x0002e9a5... (71 %)
Writing at 0x0003674c... (85 %)
Writing at 0x0003c2e0... (100 %)
Wrote 197840 bytes (109582 compressed) at 0x00010000 in 2.9 seconds (effective 552.0 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 227.3 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
